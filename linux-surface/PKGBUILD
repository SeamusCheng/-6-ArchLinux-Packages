# Maintainer: Maximilian Luz <luzmaximilian@gmail.com>
#
# Based on Arch Linux and Arch Linux for ARM PKGBUILDs

pkgbase="linux-surface"
pkgver="5.19.rc8"
pkgrel="1"

_pkgdesc="Linux Surface"

arch=("aarch64")
options=("!strip")
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'git' 'dtc')

_ref_ksource="a4328e19f6182378b653ecdd7ceb306ca06d04db"
_ref_config_base="3988a5dc65f97fed117e65a665adb6cfce9da29f"
_ref_config_surface="2c1f44f055e5373dd657587d127c6228b1386ee7"

source=(
    "kernel::git+https://github.com/linux-surface/kernel.git#commit=${_ref_ksource}"
    "base.config::https://raw.githubusercontent.com/archlinuxarm/PKGBUILDs/${_ref_config_base}/core/linux-aarch64/config"
    "surface.config::https://raw.githubusercontent.com/qzed/aarch64-kernel-configs/${_ref_config_surface}/fragments/spx.config"
    "overrides.config"
    "linux-surface.preset"
    "linux-surface.preset"
)
sha256sums=('SKIP'
            '697ba2890990b247af79ec026f5f666cf6a866319b1b836f9b7bf4939a22a519'
            'aeb9ea0afe1e38a72fc798be1512a22f3601b0265c9f5b953b67cb867671e4b5'
            'f8041d666e2775b2e36d243708b0fae574914a0ce2a4e260c19127932f3d072e'
            'dee0315958e71d628af287e85eea6c2ec1e73f9f7cc78763168fbc627629e262'
            'dee0315958e71d628af287e85eea6c2ec1e73f9f7cc78763168fbc627629e262')

prepare() {
    cd "${srcdir}/kernel"

    msg2 "Setting version..."

    echo "" > ".scmversion"                         # ignore uncommitted changes
    # ./scripts/setlocalversion --save-scmversion   # alternative: include git tag / dirty flag
    echo "-${pkgrel}" > "localversion.10-pkgrel"
    echo "${pkgbase#linux}" > "localversion.20-pkgname"

    msg2 "Configuring..."
    ./scripts/kconfig/merge_config.sh -m "${srcdir}/base.config" "${srcdir}/surface.config" "${srcdir}/overrides.config"
    make olddefconfig
}

build() {
    cd "${srcdir}/kernel"

    # get kernel version
    msg2 "Preparing kernel build..."

    make prepare
    make -s kernelrelease > version

    # build kernel
    msg2 "Building ${pkgbase} version $(<version)..."

    unset LDFLAGS
    unset CFLAGS

    make all modules dtbs
}

_package() {
    pkgdesc="${_pkgdesc} kernel and modules"
    depends=("coreutils" "linux-firmware" "kmod" "mkinitcpio>=0.7")
    optdepends=("crda: to set the correct wireless channels of your country")
    install="${pkgbase}.install"

    cd "${srcdir}/kernel"

    local kernver="$(<version)"
    local modulesdir="${pkgdir}/usr/lib/modules/${kernver}"
    local image_name="$(make -s image_name)"

    msg2 "Installing boot image..."

    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make -s image_name)" "${modulesdir}/vmlinuz"

    # Used by mkinitcpio to name the kernel
    echo "${pkgbase}" | install -Dm644 /dev/stdin "${modulesdir}/pkgbase"

    msg2 "Installing modules..."
    make INSTALL_MOD_PATH="${pkgdir}/usr" INSTALL_MOD_STRIP=1 modules_install

    # remove build and source links
    rm "${modulesdir}"/{source,build}

    msg2 "Installing dtbs..."
    make INSTALL_DTBS_PATH="${modulesdir}/dtb" dtbs_install
    mkdir -p "${pkgdir}/boot/dtb" && cp -r "${modulesdir}/dtb" "${pkgdir}/boot/dtb/${pkgbase}"

    msg2 "Installing mkinitcpio preset..."

    # sed expression for following substitutions
    local _subst="
        s|%PKGBASE%|${pkgbase}|g
        s|%KERNVER%|${kernver}|g
    "

    # install mkinitcpio preset file
    sed "${_subst}" "${srcdir}/${pkgbase}.preset" |
        install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"
}

_package-headers() {
    pkgdesc="${_pkgdesc} kernel header files and scripts for building external modules"

    cd "${srcdir}/kernel"

    local builddir="${pkgdir}/usr/lib/modules/$(<version)/build"

    msg2 "Installing build files..."
    install -Dt "${builddir}" -m644 ".config" "Makefile" "Module.symvers" "System.map" \
            "localversion.10-pkgrel" "localversion.20-pkgname" "version" "vmlinux"
    install -Dt "${builddir}/kernel" -m644 "kernel/Makefile"
    install -Dt "${builddir}/arch/arm64" -m644 "arch/arm64/Makefile"
    cp -t "${builddir}" -a "scripts"

    # add xfs and shmem for aufs building
    mkdir -p "${builddir}"/{fs/xfs,mm}

    msg2 "Installing headers..."
    cp -t "${builddir}" -a "include"
    cp -t "${builddir}/arch/arm64" -a "arch/arm64/include"
    install -Dt "${builddir}/arch/arm64/kernel" -m644 "arch/arm64/kernel/asm-offsets.s"
    mkdir -p "${builddir}/arch/arm"
    cp -t "${builddir}/arch/arm" -a "arch/arm/include"

    install -Dt "${builddir}/drivers/md" -m644 "drivers/md/"*.h
    install -Dt "${builddir}/net/mac80211" -m644 "net/mac80211/"*.h

    # https://bugs.archlinux.org/task/13146
    install -Dt "${builddir}/drivers/media/i2c" -m644 "drivers/media/i2c/msp3400-driver.h"

    # https://bugs.archlinux.org/task/20402
    install -Dt "${builddir}/drivers/media/usb/dvb-usb" -m644 "drivers/media/usb/dvb-usb/"*.h
    install -Dt "${builddir}/drivers/media/dvb-frontends" -m644 "drivers/media/dvb-frontends/"*.h
    install -Dt "${builddir}/drivers/media/tuners" -m644 "drivers/media/tuners/"*.h

    # https://bugs.archlinux.org/task/71392
    install -Dt "${builddir}/drivers/iio/common/hid-sensors" -m644 "drivers/iio/common/hid-sensors/"*.h

    msg2 "Installing KConfig files..."
    find . -name 'Kconfig*' -exec install -Dm644 {} "${builddir}/{}" \;

    msg2 "Removing unneeded architectures..."
    local arch
    for arch in "${builddir}"/arch/*/; do
      [[ ${arch} = */arm64/ ]] && continue
      echo "Removing $(basename "${arch}")"
      rm -r "${arch}"
    done

    msg2 "Removing documentation..."
    rm -r "${builddir}/Documentation"

    msg2 "Removing broken symlinks..."
    find -L "${builddir}" -type l -printf 'Removing %P\n' -delete

    msg2 "Removing loose objects..."
    find "${builddir}" -type f -name '*.o' -printf 'Removing %P\n' -delete

    msg2 "Stripping build tools..."
    local file
    while read -rd '' file; do
        case "$(file -bi "${file}")" in
            application/x-sharedlib\;*)         # Libraries (.so)
                strip -v ${STRIP_SHARED} "${file}" ;;
            application/x-archive\;*)           # Libraries (.a)
                strip -v ${STRIP_STATIC} "${file}" ;;
            application/x-executable\;*)        # Binaries
                strip -v ${STRIP_BINARIES} "${file}" ;;
            application/x-pie-executable\;*)    # Relocatable binaries
                strip -v ${STRIP_SHARED} "$file" ;;
        esac
    done < <(find "${builddir}" -type f -perm -u+x ! -name vmlinux -print0)

    echo "Adding symlink..."
    mkdir -p "${pkgdir}/usr/src"
    ln -sr "${builddir}" "${pkgdir}/usr/src/${pkgbase}"
}

# dynamically define package functions
pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in "${pkgname[@]}"; do
    eval "package_${_p}() {
        $(declare -f "_package${_p#${pkgbase}}")
        _package${_p#${pkgbase}}
    }"
done