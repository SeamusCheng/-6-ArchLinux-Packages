From 508dbb40b9cb2970759909c97b46698336f0ce37 Mon Sep 17 00:00:00 2001
From: Dylan Van Assche <me@dylanvanassche.be>
Date: Wed, 21 Dec 2022 19:45:54 +0100
Subject: [PATCH 1/7] data: qmi-service-ssc: add SSC service

The SSC service is the Qualcomm Snapdragon Sensor Core (SSC) which is a
remoteproc exposing the sensor devices in the latest Qualcomm SoCs.
The SSC manages the power to the sensors, sample rates, etc. which
can be used over QMI. In contrast to other QMI services, the SSC uses
QMI only as a transport mechamism. The actual messages are Protobuf
messages encoded in the QMI messages and indications.
Therefore, only 1 QMI message is used and 2 QMI indications.
The SSC may emit QMI indications with a small data size or much bigger,
they are indentical besides the data size and ID.
---
 data/qmi-collection-basic.json                |  6 +-
 data/qmi-service-ssc.json                     | 87 +++++++++++++++++++
 .../libqmi-glib/libqmi-glib-common.sections   |  6 ++
 .../libqmi-glib/libqmi-glib-docs.xml          | 14 +++
 meson.build                                   |  2 +-
 src/libqmi-glib/generated/meson.build         |  3 +-
 src/libqmi-glib/libqmi-glib.h                 |  2 +
 src/libqmi-glib/meson.build                   |  1 +
 src/libqmi-glib/qmi-device.c                  |  6 ++
 src/libqmi-glib/qmi-enums-ssc.h               | 40 +++++++++
 src/libqmi-glib/qmi-enums.h                   |  2 +
 src/libqmi-glib/qmi-message.c                 |  6 ++
 src/qmicli/qmicli.c                           |  1 +
 13 files changed, 173 insertions(+), 3 deletions(-)
 create mode 100644 data/qmi-service-ssc.json
 create mode 100644 src/libqmi-glib/qmi-enums-ssc.h

diff --git a/data/qmi-collection-basic.json b/data/qmi-collection-basic.json
index ba0e33e0..a16d1f16 100644
--- a/data/qmi-collection-basic.json
+++ b/data/qmi-collection-basic.json
@@ -211,5 +211,9 @@
 
     "QMI_MESSAGE_DSD_GET_SYSTEM_STATUS",
     "QMI_MESSAGE_DSD_SYSTEM_STATUS_CHANGE",
-    "QMI_INDICATION_DSD_SYSTEM_STATUS"
+    "QMI_INDICATION_DSD_SYSTEM_STATUS",
+
+    "QMI_MESSAGE_SSC_MESSAGE",
+    "QMI_INDICATION_SSC_REPORT_SMALL",
+    "QMI_INDICATION_SSC_REPORT_LARGE"
 ]
diff --git a/data/qmi-service-ssc.json b/data/qmi-service-ssc.json
new file mode 100644
index 00000000..9ef4d9ad
--- /dev/null
+++ b/data/qmi-service-ssc.json
@@ -0,0 +1,87 @@
+[
+  // *********************************************************************************
+  {  "name"    : "SSC",
+     "type"    : "Service" },
+
+  // *********************************************************************************
+  {  "name"    : "QMI Client SSC",
+     "type"    : "Client",
+     "since"   : "1.34" },
+
+  // *********************************************************************************
+  {  "name"    : "QMI Message SSC",
+     "type"    : "Message-ID-Enum" },
+
+  // *********************************************************************************
+  {  "name"    : "QMI Indication SSC",
+     "type"    : "Indication-ID-Enum" },
+
+  // *********************************************************************************
+  {  "name"    : "Control",
+     "type"    : "Message",
+     "service" : "SSC",
+     "id"      : "0x0020",
+     "since"   : "1.34",
+     "input"   : [ { "name"               : "Protobuf Data",
+                     "id"                 : "0x01",
+                     "type"               : "TLV",
+                     "since"              : "1.34",
+                     "format"             : "array",
+                     "size-prefix-format" : "guint16",
+                     "array-element"      : { "format" : "guint8" }
+                   },
+                   { "name"               : "Unknown Value",
+	             "id"                 : "0x10",
+		     "type"               : "TLV",
+		     "since"              : "1.34",
+		     "format"             : "guint8" } ],
+     "output"  : [ { "common-ref" : "Operation Result" },
+                   { "name"       : "Client ID",
+                     "id"         : "0x10",
+                     "type"       : "TLV",
+                     "since"      : "1.34",
+                     "format"     : "guint64",
+                     "prerequisites": [ { "common-ref" : "Success" } ] },
+                   { "name"      : "Response",
+                     "id"        : "0x11",
+                     "type"      : "TLV",
+                     "since"     : "1.34",
+                     "format"    : "guint32",
+                     "prerequisites": [ { "common-ref" : "Success" } ] } ] },
+  // *********************************************************************************
+  {  "name"    : "Report Small",
+     "type"    : "Indication",
+     "service" : "SSC",
+     "id"      : "0x0021",
+     "since"   : "1.34",
+     "output"  : [ { "name"   : "Client ID",
+                     "id"     : "0x01",
+                     "type"   : "TLV",
+                     "since"  : "1.34",
+                     "format" : "guint64" },
+                   { "name"               : "Protobuf Data",
+                     "id"                 : "0x02",
+                     "type"               : "TLV",
+                     "since"              : "1.34",
+                     "format"             : "array",
+                     "size-prefix-format" : "guint16",
+                     "array-element"      : { "format" : "guint8" } } ] },
+  // *********************************************************************************
+  {  "name"    : "Report Large",
+     "type"    : "Indication",
+     "service" : "SSC",
+     "id"      : "0x0022",
+     "since"   : "1.34",
+     "output"  : [ { "name"   : "Client ID",
+                     "id"     : "0x01",
+                     "type"   : "TLV",
+                     "since"  : "1.34",
+                     "format" : "guint64" },
+                   { "name"               : "Protobuf Data",
+                     "id"                 : "0x02",
+                     "type"               : "TLV",
+                     "since"              : "1.34",
+                     "format"             : "array",
+                     "size-prefix-format" : "guint16",
+                     "array-element"      : { "format" : "guint8" } } ] }
+]
diff --git a/docs/reference/libqmi-glib/libqmi-glib-common.sections b/docs/reference/libqmi-glib/libqmi-glib-common.sections
index c812dcf6..f9cc6a67 100644
--- a/docs/reference/libqmi-glib/libqmi-glib-common.sections
+++ b/docs/reference/libqmi-glib/libqmi-glib-common.sections
@@ -30,6 +30,7 @@ HAVE_QMI_SERVICE_WDS
 HAVE_QMI_SERVICE_WMS
 HAVE_QMI_SERVICE_DPM
 HAVE_QMI_SERVICE_FOX
+HAVE_QMI_SERVICE_SSC
 </SECTION>
 
 <SECTION>
@@ -1602,6 +1603,11 @@ QMI_TYPE_FOX_FIRMWARE_VERSION_TYPE
 qmi_fox_firmware_version_type_get_type
 </SECTION>
 
+<SECTION>
+<FILE>qmi-enums-ssc</FILE>
+<TITLE>SSC enumerations and flags</TITLE>
+</SECTION>
+
 <SECTION>
 <FILE>qmi-errors</FILE>
 <TITLE>Errors</TITLE>
diff --git a/docs/reference/libqmi-glib/libqmi-glib-docs.xml b/docs/reference/libqmi-glib/libqmi-glib-docs.xml
index f20b2049..604f5213 100644
--- a/docs/reference/libqmi-glib/libqmi-glib-docs.xml
+++ b/docs/reference/libqmi-glib/libqmi-glib-docs.xml
@@ -573,6 +573,20 @@
     </section>
   </chapter>
 
+  <chapter>
+    <title>Snapdragon Sensor Core Service (SSC)</title>
+    <xi:include href="xml/qmi-client-ssc.xml"/>
+    <section>
+      <title>SSC Indications</title>
+      <xi:include href="xml/qmi-indication-ssc-report-small.xml"/>
+      <xi:include href="xml/qmi-indication-ssc-report-large.xml"/>
+    </section>
+    <section>
+      <title>SSC Requests</title>
+      <xi:include href="xml/qmi-message-ssc-control.xml"/>
+    </section>
+  </chapter>
+
   <chapter>
     <title>Compatibility with older versions</title>
     <xi:include href="xml/qmi-compat.xml"/>
diff --git a/meson.build b/meson.build
index 8711e0a0..898a2475 100644
--- a/meson.build
+++ b/meson.build
@@ -3,7 +3,7 @@
 
 project(
   'libqmi', 'c',
-  version: '1.33.5',
+  version: '1.33.6',
   license: 'GPL2',
   default_options: [
     'buildtype=debugoptimized',
diff --git a/src/libqmi-glib/generated/meson.build b/src/libqmi-glib/generated/meson.build
index a41acc0e..6fe8e10b 100644
--- a/src/libqmi-glib/generated/meson.build
+++ b/src/libqmi-glib/generated/meson.build
@@ -67,7 +67,7 @@ gen_headers += custom_target(
   command: [
     python,
     qmi_mkenums,
-    '--fhead', '#ifndef __LIBQMI_GLIB_ENUM_TYPES_H__\n#define __LIBQMI_GLIB_ENUM_TYPES_H__\n#include "qmi-enums.h"\n#include "qmi-enums-wds.h"\n#include "qmi-enums-dms.h"\n#include "qmi-enums-nas.h"\n#include "qmi-enums-wms.h"\n#include "qmi-enums-pds.h"\n#include "qmi-enums-pdc.h"\n#include "qmi-enums-pbm.h"\n#include "qmi-enums-uim.h"\n#include "qmi-enums-sar.h"\n#include "qmi-enums-oma.h"\n#include "qmi-enums-wda.h"\n#include "qmi-enums-voice.h"\n#include "qmi-enums-loc.h"\n#include "qmi-enums-qos.h"\n#include "qmi-enums-gas.h"\n#include "qmi-enums-dsd.h"\n#include "qmi-enums-fox.h"\n#include "qmi-device.h"\n',
+    '--fhead', '#ifndef __LIBQMI_GLIB_ENUM_TYPES_H__\n#define __LIBQMI_GLIB_ENUM_TYPES_H__\n#include "qmi-enums.h"\n#include "qmi-enums-wds.h"\n#include "qmi-enums-dms.h"\n#include "qmi-enums-nas.h"\n#include "qmi-enums-wms.h"\n#include "qmi-enums-pds.h"\n#include "qmi-enums-pdc.h"\n#include "qmi-enums-pbm.h"\n#include "qmi-enums-uim.h"\n#include "qmi-enums-sar.h"\n#include "qmi-enums-oma.h"\n#include "qmi-enums-wda.h"\n#include "qmi-enums-voice.h"\n#include "qmi-enums-loc.h"\n#include "qmi-enums-qos.h"\n#include "qmi-enums-gas.h"\n#include "qmi-enums-dsd.h"\n#include "qmi-enums-fox.h"\n#include "qmi-enums-ssc.h"\n#include "qmi-device.h"\n',
     '--template', files(templates_dir / enum_types + '.h.template'),
     '--ftail', '#endif /* __LIBQMI_GLIB_ENUM_TYPES_H__ */\n',
     '@INPUT@'],
@@ -180,6 +180,7 @@ services = [
   'pds',
   'qos',
   'sar',
+  'ssc',
   'uim',
   'voice',
   'wda',
diff --git a/src/libqmi-glib/libqmi-glib.h b/src/libqmi-glib/libqmi-glib.h
index 867429f7..5f88684d 100644
--- a/src/libqmi-glib/libqmi-glib.h
+++ b/src/libqmi-glib/libqmi-glib.h
@@ -99,6 +99,8 @@
 #include "qmi-enums-fox.h"
 #include "qmi-fox.h"
 
+#include "qmi-ssc.h"
+
 /* generated */
 #include "qmi-error-types.h"
 #include "qmi-enum-types.h"
diff --git a/src/libqmi-glib/meson.build b/src/libqmi-glib/meson.build
index 84c8e636..39e5454b 100644
--- a/src/libqmi-glib/meson.build
+++ b/src/libqmi-glib/meson.build
@@ -20,6 +20,7 @@ qmi_enums_headers = files(
   'qmi-enums-pds.h',
   'qmi-enums-qos.h',
   'qmi-enums-sar.h',
+  'qmi-enums-ssc.h',
   'qmi-enums-uim.h',
   'qmi-enums-voice.h',
   'qmi-enums-wda.h',
diff --git a/src/libqmi-glib/qmi-device.c b/src/libqmi-glib/qmi-device.c
index 01e7ba13..f119d5fe 100644
--- a/src/libqmi-glib/qmi-device.c
+++ b/src/libqmi-glib/qmi-device.c
@@ -57,6 +57,7 @@
 #include "qmi-dsd.h"
 #include "qmi-dpm.h"
 #include "qmi-fox.h"
+#include "qmi-ssc.h"
 #include "qmi-utils.h"
 #include "qmi-helpers.h"
 #include "qmi-error-types.h"
@@ -1310,6 +1311,11 @@ qmi_device_allocate_client (QmiDevice *self,
     case QMI_SERVICE_FOX:
 #if defined HAVE_QMI_SERVICE_FOX
         ctx->client_type = QMI_TYPE_CLIENT_FOX;
+#endif
+        break;
+    case QMI_SERVICE_SSC:
+#if defined HAVE_QMI_SERVICE_SSC
+        ctx->client_type = QMI_TYPE_CLIENT_SSC;
 #endif
         break;
 
diff --git a/src/libqmi-glib/qmi-enums-ssc.h b/src/libqmi-glib/qmi-enums-ssc.h
new file mode 100644
index 00000000..7b3b619c
--- /dev/null
+++ b/src/libqmi-glib/qmi-enums-ssc.h
@@ -0,0 +1,40 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/*
+ * libqmi-glib -- GLib/GIO based library to control QMI devices
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301 USA.
+ *
+ * Copyright (C) 2022 Dylan Van Assche <me@dylanvanassche.be>
+ */
+
+#ifndef _LIBQMI_GLIB_QMI_ENUMS_SSC_H_
+#define _LIBQMI_GLIB_QMI_ENUMS_SSC_H_
+
+#if !defined (__LIBQMI_GLIB_H_INSIDE__) && !defined (LIBQMI_GLIB_COMPILATION)
+#error "Only <libqmi-glib.h> can be included directly."
+#endif
+
+/**
+ * SECTION: qmi-enums-ssc
+ * @title: SSC enumerations and flags
+ * @short_description: Enumerations and flags in the SSC service.
+ *
+ * This section defines enumerations and flags used in the SSC service
+ * interface.
+ */
+
+#endif /* _LIBQMI_GLIB_QMI_ENUMS_SSC_H_ */
+
diff --git a/src/libqmi-glib/qmi-enums.h b/src/libqmi-glib/qmi-enums.h
index b50841c2..4f77097c 100644
--- a/src/libqmi-glib/qmi-enums.h
+++ b/src/libqmi-glib/qmi-enums.h
@@ -86,6 +86,7 @@
  * @QMI_SERVICE_RMS: Remote Management Service.
  * @QMI_SERVICE_OMA: Open Mobile Alliance device management service.
  * @QMI_SERVICE_FOX: Foxconn General Modem Service. Since: 1.32.
+ * @QMI_SERVICE_SSC: Snapdragon Sensore Core Service. Since: 1.34.
  * @QMI_SERVICE_FOTA: Firmware Over The Air service. Since: 1.24.
  * @QMI_SERVICE_GMS: Telit General Modem Service. Since: 1.24.
  * @QMI_SERVICE_GAS: Telit General Application Service. Since: 1.24.
@@ -148,6 +149,7 @@ typedef enum { /*< since=1.0 >*/
     QMI_SERVICE_FOTA    = 0xE6,
     QMI_SERVICE_GMS     = 0xE7,
     QMI_SERVICE_GAS     = 0xE8,
+    QMI_SERVICE_SSC     = 0x190,
 } QmiService;
 
 /**
diff --git a/src/libqmi-glib/qmi-message.c b/src/libqmi-glib/qmi-message.c
index a51b77e1..dff0be39 100644
--- a/src/libqmi-glib/qmi-message.c
+++ b/src/libqmi-glib/qmi-message.c
@@ -1728,6 +1728,11 @@ qmi_message_get_printable_full (QmiMessage        *self,
     case QMI_SERVICE_FOX:
 #if defined HAVE_QMI_SERVICE_FOX
         contents = __qmi_message_fox_get_printable (self, context, line_prefix);
+#endif
+        break;
+    case QMI_SERVICE_SSC:
+#if defined HAVE_QMI_SERVICE_SSC
+        contents = __qmi_message_ssc_get_printable (self, context, line_prefix);
 #endif
         break;
 
@@ -1846,6 +1851,7 @@ __qmi_message_is_abortable (QmiMessage        *self,
     case QMI_SERVICE_DSD:
     case QMI_SERVICE_QOS:
     case QMI_SERVICE_FOX:
+    case QMI_SERVICE_SSC:
     default:
         return FALSE;
     }
diff --git a/src/qmicli/qmicli.c b/src/qmicli/qmicli.c
index a37eaab6..d2834450 100644
--- a/src/qmicli/qmicli.c
+++ b/src/qmicli/qmicli.c
@@ -510,6 +510,7 @@ allocate_client_ready (QmiDevice *dev,
     case QMI_SERVICE_FOTA:
     case QMI_SERVICE_PDS:
     case QMI_SERVICE_OMA:
+    case QMI_SERVICE_SSC:
     default:
         break;
     }
-- 
2.39.2

