From d70669657d1c475ff2127528a26f71fed71d257f Mon Sep 17 00:00:00 2001
From: Dylan Van Assche <me@dylanvanassche.be>
Date: Wed, 29 Mar 2023 16:37:26 +0200
Subject: [PATCH 6/7] libqmi-glib,endpoint-qrtr: handle QMUX and QRTR messages

Handle QMUX and QRTR messages in QMI Message:

- Use QmiService enum instead of guint where possible
- Bump service ID size from guint8 to guint6 when constructing TLVs
- Extract service IDs from QMI messages depending on marker
---
 src/libqmi-glib/qmi-endpoint-qrtr.c | 28 +++++++++++++++++++++-------
 1 file changed, 21 insertions(+), 7 deletions(-)

diff --git a/src/libqmi-glib/qmi-endpoint-qrtr.c b/src/libqmi-glib/qmi-endpoint-qrtr.c
index 8c4007a1..7ab84afa 100644
--- a/src/libqmi-glib/qmi-endpoint-qrtr.c
+++ b/src/libqmi-glib/qmi-endpoint-qrtr.c
@@ -43,6 +43,8 @@
 /* Constants for allocating/releasing clients */
 #define QMI_MESSAGE_CTL_ALLOCATE_CID 0x0022
 #define QMI_MESSAGE_CTL_RELEASE_CID 0x0023
+#define QMI_MESSAGE_CTL_ALLOCATE_CID_QRTR 0xFF22
+#define QMI_MESSAGE_CTL_RELEASE_CID_QRTR 0xFF23
 #define QMI_MESSAGE_TLV_ALLOCATION_INFO 0x01
 #define QMI_MESSAGE_INPUT_TLV_SERVICE 0x01
 
@@ -137,7 +139,7 @@ client_message_cb (QrtrClient      *qrtr_client,
                    QmiEndpointQrtr *self)
 {
     QmiMessage        *message;
-    guint              service;
+    QmiService         service;
     guint              cid;
     g_autoptr(GError)  error = NULL;
 
@@ -262,7 +264,7 @@ release_client (QmiEndpointQrtr *self,
 
 static gboolean
 construct_alloc_tlv (QmiMessage *message,
-                     guint8      service,
+                     guint16     service,
                      guint8      client)
 {
     gsize init_offset;
@@ -270,8 +272,14 @@ construct_alloc_tlv (QmiMessage *message,
     init_offset = qmi_message_tlv_write_init (message,
                                               QMI_MESSAGE_TLV_ALLOCATION_INFO,
                                               NULL);
+    if (service > G_MAXUINT8)
+        return init_offset &&
+            qmi_message_tlv_write_guint16 (message, QMI_ENDIAN_LITTLE, service, NULL) &&
+            qmi_message_tlv_write_guint8 (message, client, NULL) &&
+            qmi_message_tlv_write_complete (message, init_offset, NULL);
+
     return init_offset &&
-        qmi_message_tlv_write_guint8 (message, service, NULL) &&
+        qmi_message_tlv_write_guint8 (message, (guint8) service, NULL) &&
         qmi_message_tlv_write_guint8 (message, client, NULL) &&
         qmi_message_tlv_write_complete (message, init_offset, NULL);
 }
@@ -282,13 +290,14 @@ handle_alloc_cid (QmiEndpointQrtr *self,
 {
     gsize                 offset = 0;
     gsize                 init_offset;
-    guint8                service;
+    QmiService            service;
     guint                 cid;
     g_autoptr(QmiMessage) response = NULL;
     g_autoptr(GError)     error = NULL;
 
     if (((init_offset = qmi_message_tlv_read_init (message, QMI_MESSAGE_TLV_ALLOCATION_INFO, NULL, &error)) == 0) ||
-        !qmi_message_tlv_read_guint8 (message, init_offset, &offset, &service, &error)) {
+        (qmi_message_get_message_id (message) == QMI_MESSAGE_CTL_ALLOCATE_CID && !qmi_message_tlv_read_guint8 (message, init_offset, &offset, (guint8 *) &service, &error)) ||
+        (qmi_message_get_message_id (message) == QMI_MESSAGE_CTL_ALLOCATE_CID_QRTR && !qmi_message_tlv_read_guint16 (message, init_offset, &offset, QMI_ENDIAN_LITTLE, (guint16 *) &service, &error))) {
         g_debug ("[%s] error allocating CID: could not parse message: %s",
                  qmi_endpoint_get_name (QMI_ENDPOINT (self)), error->message);
         response = qmi_message_response_new (message, QMI_PROTOCOL_ERROR_MALFORMED_MESSAGE);
@@ -299,6 +308,8 @@ handle_alloc_cid (QmiEndpointQrtr *self,
         return;
     }
 
+    g_debug("Extracted service: %d", service);
+
     cid = allocate_client (self, service, &error);
     if (!cid) {
         g_debug ("[%s] error allocating CID: %s",
@@ -327,13 +338,14 @@ handle_release_cid (QmiEndpointQrtr *self,
 {
     gsize                 offset = 0;
     gsize                 init_offset;
-    guint8                service;
+    QmiService            service;
     guint8                cid;
     g_autoptr(QmiMessage) response = NULL;
     g_autoptr(GError)     error = NULL;
 
     if (((init_offset = qmi_message_tlv_read_init (message, QMI_MESSAGE_TLV_ALLOCATION_INFO, NULL, &error)) == 0) ||
-        !qmi_message_tlv_read_guint8 (message, init_offset, &offset, &service, &error) ||
+        (qmi_message_get_message_id (message) == QMI_MESSAGE_CTL_RELEASE_CID && !qmi_message_tlv_read_guint8 (message, init_offset, &offset, (guint8 *) &service, &error)) ||
+        (qmi_message_get_message_id (message) == QMI_MESSAGE_CTL_RELEASE_CID_QRTR && !qmi_message_tlv_read_guint16 (message, init_offset, &offset, QMI_ENDIAN_LITTLE, (guint16 *) &service, &error)) ||
         !qmi_message_tlv_read_guint8 (message, init_offset, &offset, &cid, &error)) {
         g_debug ("[%s] error releasing CID: could not parse message: %s",
                  qmi_endpoint_get_name (QMI_ENDPOINT (self)), error->message);
@@ -389,9 +401,11 @@ handle_ctl_message (QmiEndpointQrtr *self,
 {
     switch (qmi_message_get_message_id (message)) {
         case QMI_MESSAGE_CTL_ALLOCATE_CID:
+        case QMI_MESSAGE_CTL_ALLOCATE_CID_QRTR:
             handle_alloc_cid (self, message);
             break;
         case QMI_MESSAGE_CTL_RELEASE_CID:
+        case QMI_MESSAGE_CTL_RELEASE_CID_QRTR:
             handle_release_cid (self, message);
             break;
         case QMI_MESSAGE_CTL_SYNC:
-- 
2.39.2

